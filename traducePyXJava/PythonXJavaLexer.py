# Generated from PythonXJava.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,94,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,0,1,1,1,1,5,1,40,8,1,10,1,
        12,1,43,9,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,4,13,77,8,13,11,13,12,13,78,1,14,4,14,82,8,14,
        11,14,12,14,83,1,14,1,14,1,15,3,15,89,8,15,1,15,1,15,1,15,1,15,0,
        0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,2,0,9,9,32,32,97,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,
        37,1,0,0,0,5,44,1,0,0,0,7,46,1,0,0,0,9,48,1,0,0,0,11,50,1,0,0,0,
        13,52,1,0,0,0,15,54,1,0,0,0,17,60,1,0,0,0,19,67,1,0,0,0,21,69,1,
        0,0,0,23,71,1,0,0,0,25,73,1,0,0,0,27,76,1,0,0,0,29,81,1,0,0,0,31,
        88,1,0,0,0,33,34,5,100,0,0,34,35,5,101,0,0,35,36,5,102,0,0,36,2,
        1,0,0,0,37,41,7,0,0,0,38,40,7,1,0,0,39,38,1,0,0,0,40,43,1,0,0,0,
        41,39,1,0,0,0,41,42,1,0,0,0,42,4,1,0,0,0,43,41,1,0,0,0,44,45,5,40,
        0,0,45,6,1,0,0,0,46,47,5,41,0,0,47,8,1,0,0,0,48,49,5,44,0,0,49,10,
        1,0,0,0,50,51,5,58,0,0,51,12,1,0,0,0,52,53,5,61,0,0,53,14,1,0,0,
        0,54,55,5,112,0,0,55,56,5,114,0,0,56,57,5,105,0,0,57,58,5,110,0,
        0,58,59,5,116,0,0,59,16,1,0,0,0,60,61,5,114,0,0,61,62,5,101,0,0,
        62,63,5,116,0,0,63,64,5,117,0,0,64,65,5,114,0,0,65,66,5,110,0,0,
        66,18,1,0,0,0,67,68,5,43,0,0,68,20,1,0,0,0,69,70,5,42,0,0,70,22,
        1,0,0,0,71,72,5,45,0,0,72,24,1,0,0,0,73,74,5,47,0,0,74,26,1,0,0,
        0,75,77,7,2,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,
        1,0,0,0,79,28,1,0,0,0,80,82,7,3,0,0,81,80,1,0,0,0,82,83,1,0,0,0,
        83,81,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,6,14,0,0,86,30,1,
        0,0,0,87,89,5,13,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,
        91,5,10,0,0,91,92,1,0,0,0,92,93,6,15,0,0,93,32,1,0,0,0,5,0,41,78,
        83,88,1,6,0,0
    ]

class PythonXJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEF = 1
    IDENTIFIER = 2
    LPAREN = 3
    RPAREN = 4
    COMMA = 5
    COLON = 6
    ASSIGN = 7
    PRINT = 8
    RETURN = 9
    PLUS = 10
    MULTIPLY = 11
    REST = 12
    DIVIDE = 13
    NUMBER = 14
    WS = 15
    NEWLINE = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'('", "')'", "','", "':'", "'='", "'print'", "'return'", 
            "'+'", "'*'", "'-'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "IDENTIFIER", "LPAREN", "RPAREN", "COMMA", "COLON", "ASSIGN", 
            "PRINT", "RETURN", "PLUS", "MULTIPLY", "REST", "DIVIDE", "NUMBER", 
            "WS", "NEWLINE" ]

    ruleNames = [ "DEF", "IDENTIFIER", "LPAREN", "RPAREN", "COMMA", "COLON", 
                  "ASSIGN", "PRINT", "RETURN", "PLUS", "MULTIPLY", "REST", 
                  "DIVIDE", "NUMBER", "WS", "NEWLINE" ]

    grammarFileName = "PythonXJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


