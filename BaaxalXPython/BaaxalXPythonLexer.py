# Generated from BaaxalXPython.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,385,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,5,30,306,
        8,30,10,30,12,30,309,9,30,1,31,4,31,312,8,31,11,31,12,31,313,1,31,
        1,31,4,31,318,8,31,11,31,12,31,319,3,31,322,8,31,1,32,1,32,5,32,
        326,8,32,10,32,12,32,329,9,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,3,39,346,8,39,1,39,1,39,
        1,39,1,39,1,40,4,40,353,8,40,11,40,12,40,354,1,40,1,40,1,41,1,41,
        1,41,1,41,5,41,363,8,41,10,41,12,41,366,9,41,1,41,1,41,1,42,1,42,
        1,42,1,42,1,42,5,42,375,8,42,10,42,12,42,378,9,42,1,42,1,42,1,42,
        1,42,1,42,1,42,2,327,376,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,393,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,90,1,0,0,0,5,97,1,0,0,0,7,102,
        1,0,0,0,9,109,1,0,0,0,11,128,1,0,0,0,13,136,1,0,0,0,15,150,1,0,0,
        0,17,158,1,0,0,0,19,182,1,0,0,0,21,192,1,0,0,0,23,199,1,0,0,0,25,
        204,1,0,0,0,27,224,1,0,0,0,29,233,1,0,0,0,31,255,1,0,0,0,33,262,
        1,0,0,0,35,265,1,0,0,0,37,267,1,0,0,0,39,269,1,0,0,0,41,271,1,0,
        0,0,43,273,1,0,0,0,45,276,1,0,0,0,47,279,1,0,0,0,49,282,1,0,0,0,
        51,284,1,0,0,0,53,286,1,0,0,0,55,289,1,0,0,0,57,292,1,0,0,0,59,297,
        1,0,0,0,61,303,1,0,0,0,63,311,1,0,0,0,65,323,1,0,0,0,67,332,1,0,
        0,0,69,334,1,0,0,0,71,336,1,0,0,0,73,338,1,0,0,0,75,340,1,0,0,0,
        77,342,1,0,0,0,79,345,1,0,0,0,81,352,1,0,0,0,83,358,1,0,0,0,85,369,
        1,0,0,0,87,88,5,45,0,0,88,89,5,62,0,0,89,2,1,0,0,0,90,91,5,75,0,
        0,91,92,5,225,0,0,92,93,5,97,0,0,93,94,5,106,0,0,94,95,5,97,0,0,
        95,96,5,108,0,0,96,4,1,0,0,0,97,98,5,88,0,0,98,99,5,117,0,0,99,100,
        5,117,0,0,100,101,5,108,0,0,101,6,1,0,0,0,102,103,5,84,0,0,103,104,
        5,115,0,0,104,105,5,8217,0,0,105,106,5,225,0,0,106,107,5,97,0,0,
        107,108,5,106,0,0,108,8,1,0,0,0,109,110,5,84,0,0,110,111,5,115,0,
        0,111,112,5,39,0,0,112,113,5,225,0,0,113,114,5,97,0,0,114,115,5,
        95,0,0,115,116,5,116,0,0,116,117,5,105,0,0,117,118,5,39,0,0,118,
        119,5,95,0,0,119,120,5,112,0,0,120,121,5,97,0,0,121,122,5,110,0,
        0,122,123,5,116,0,0,123,124,5,97,0,0,124,125,5,108,0,0,125,126,5,
        108,0,0,126,127,5,97,0,0,127,10,1,0,0,0,128,129,5,85,0,0,129,130,
        5,95,0,0,130,131,5,121,0,0,131,132,5,111,0,0,132,133,5,107,0,0,133,
        134,5,111,0,0,134,135,5,108,0,0,135,12,1,0,0,0,136,137,5,87,0,0,
        137,138,5,97,0,0,138,139,5,95,0,0,139,140,5,106,0,0,140,141,5,97,
        0,0,141,142,5,97,0,0,142,143,5,106,0,0,143,144,5,95,0,0,144,145,
        5,108,0,0,145,146,5,101,0,0,146,147,5,108,0,0,147,148,5,97,0,0,148,
        149,5,39,0,0,149,14,1,0,0,0,150,151,5,66,0,0,151,152,5,97,0,0,152,
        153,5,39,0,0,153,154,5,97,0,0,154,155,5,108,0,0,155,156,5,101,0,
        0,156,157,5,39,0,0,157,16,1,0,0,0,158,159,5,84,0,0,159,160,5,115,
        0,0,160,161,5,39,0,0,161,162,5,111,0,0,162,163,5,39,0,0,163,164,
        5,111,0,0,164,165,5,107,0,0,165,166,5,115,0,0,166,167,5,105,0,0,
        167,168,5,107,0,0,168,169,5,95,0,0,169,170,5,108,0,0,170,171,5,101,
        0,0,171,172,5,32,0,0,172,173,5,99,0,0,173,174,5,111,0,0,174,175,
        5,110,0,0,175,176,5,100,0,0,176,177,5,105,0,0,177,178,5,99,0,0,178,
        179,5,105,0,0,179,180,5,243,0,0,180,181,5,110,0,0,181,18,1,0,0,0,
        182,183,5,75,0,0,183,184,5,97,0,0,184,185,5,39,0,0,185,186,5,97,
        0,0,186,187,5,108,0,0,187,188,5,105,0,0,188,189,5,107,0,0,189,190,
        5,105,0,0,190,191,5,108,0,0,191,20,1,0,0,0,192,193,5,85,0,0,193,
        194,5,116,0,0,194,195,5,105,0,0,195,196,5,39,0,0,196,197,5,97,0,
        0,197,198,5,108,0,0,198,22,1,0,0,0,199,200,5,65,0,0,200,201,5,109,
        0,0,201,202,5,97,0,0,202,203,5,108,0,0,203,24,1,0,0,0,204,205,5,
        84,0,0,205,206,5,115,0,0,206,207,5,39,0,0,207,208,5,111,0,0,208,
        209,5,39,0,0,209,210,5,111,0,0,210,211,5,107,0,0,211,212,5,115,0,
        0,212,213,5,105,0,0,213,214,5,107,0,0,214,215,5,95,0,0,215,216,5,
        108,0,0,216,217,5,101,0,0,217,218,5,32,0,0,218,219,5,98,0,0,219,
        220,5,117,0,0,220,221,5,99,0,0,221,222,5,108,0,0,222,223,5,101,0,
        0,223,26,1,0,0,0,224,225,5,70,0,0,225,226,5,250,0,0,226,227,5,117,
        0,0,227,228,5,110,0,0,228,229,5,115,0,0,229,230,5,105,0,0,230,231,
        5,111,0,0,231,232,5,110,0,0,232,28,1,0,0,0,233,234,5,84,0,0,234,
        235,5,115,0,0,235,236,5,39,0,0,236,237,5,111,0,0,237,238,5,39,0,
        0,238,239,5,111,0,0,239,240,5,107,0,0,240,241,5,115,0,0,241,242,
        5,105,0,0,242,243,5,107,0,0,243,244,5,95,0,0,244,245,5,108,0,0,245,
        246,5,101,0,0,246,247,5,32,0,0,247,248,5,102,0,0,248,249,5,117,0,
        0,249,250,5,110,0,0,250,251,5,99,0,0,251,252,5,105,0,0,252,253,5,
        243,0,0,253,254,5,110,0,0,254,30,1,0,0,0,255,256,5,89,0,0,256,257,
        5,233,0,0,257,258,5,101,0,0,258,259,5,116,0,0,259,260,5,101,0,0,
        260,261,5,108,0,0,261,32,1,0,0,0,262,263,5,87,0,0,263,264,5,97,0,
        0,264,34,1,0,0,0,265,266,5,43,0,0,266,36,1,0,0,0,267,268,5,45,0,
        0,268,38,1,0,0,0,269,270,5,42,0,0,270,40,1,0,0,0,271,272,5,47,0,
        0,272,42,1,0,0,0,273,274,5,42,0,0,274,275,5,42,0,0,275,44,1,0,0,
        0,276,277,5,61,0,0,277,278,5,61,0,0,278,46,1,0,0,0,279,280,5,33,
        0,0,280,281,5,61,0,0,281,48,1,0,0,0,282,283,5,60,0,0,283,50,1,0,
        0,0,284,285,5,62,0,0,285,52,1,0,0,0,286,287,5,60,0,0,287,288,5,61,
        0,0,288,54,1,0,0,0,289,290,5,62,0,0,290,291,5,61,0,0,291,56,1,0,
        0,0,292,293,5,116,0,0,293,294,5,114,0,0,294,295,5,117,0,0,295,296,
        5,101,0,0,296,58,1,0,0,0,297,298,5,102,0,0,298,299,5,97,0,0,299,
        300,5,108,0,0,300,301,5,115,0,0,301,302,5,101,0,0,302,60,1,0,0,0,
        303,307,7,0,0,0,304,306,7,1,0,0,305,304,1,0,0,0,306,309,1,0,0,0,
        307,305,1,0,0,0,307,308,1,0,0,0,308,62,1,0,0,0,309,307,1,0,0,0,310,
        312,7,2,0,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,
        314,1,0,0,0,314,321,1,0,0,0,315,317,5,46,0,0,316,318,7,2,0,0,317,
        316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
        322,1,0,0,0,321,315,1,0,0,0,321,322,1,0,0,0,322,64,1,0,0,0,323,327,
        5,34,0,0,324,326,9,0,0,0,325,324,1,0,0,0,326,329,1,0,0,0,327,328,
        1,0,0,0,327,325,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,331,
        5,34,0,0,331,66,1,0,0,0,332,333,5,40,0,0,333,68,1,0,0,0,334,335,
        5,41,0,0,335,70,1,0,0,0,336,337,5,58,0,0,337,72,1,0,0,0,338,339,
        5,44,0,0,339,74,1,0,0,0,340,341,5,91,0,0,341,76,1,0,0,0,342,343,
        5,93,0,0,343,78,1,0,0,0,344,346,5,13,0,0,345,344,1,0,0,0,345,346,
        1,0,0,0,346,347,1,0,0,0,347,348,5,10,0,0,348,349,1,0,0,0,349,350,
        6,39,0,0,350,80,1,0,0,0,351,353,7,3,0,0,352,351,1,0,0,0,353,354,
        1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,
        6,40,0,0,357,82,1,0,0,0,358,359,5,47,0,0,359,360,5,47,0,0,360,364,
        1,0,0,0,361,363,8,4,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,
        1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,367,368,
        6,41,0,0,368,84,1,0,0,0,369,370,5,34,0,0,370,371,5,34,0,0,371,372,
        5,34,0,0,372,376,1,0,0,0,373,375,9,0,0,0,374,373,1,0,0,0,375,378,
        1,0,0,0,376,377,1,0,0,0,376,374,1,0,0,0,377,379,1,0,0,0,378,376,
        1,0,0,0,379,380,5,34,0,0,380,381,5,34,0,0,381,382,5,34,0,0,382,383,
        1,0,0,0,383,384,6,42,0,0,384,86,1,0,0,0,10,0,307,313,319,321,327,
        345,354,364,376,1,6,0,0
    ]

class BaaxalXPythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    KAAJAL = 2
    XUUL = 3
    TSAAJ = 4
    TSAATI = 5
    UYOKOL = 6
    WAJAAJ = 7
    BAALE = 8
    KUCH_COND = 9
    KAALIKIL = 10
    UTIAL = 11
    AMAL = 12
    KUCH_BUCLE = 13
    FUUNSION = 14
    KUCH_FUNC = 15
    AND = 16
    OR = 17
    PLUS = 18
    REST = 19
    MULTIPLY = 20
    DIVIDE = 21
    POWER = 22
    EQUALS = 23
    DIFFERENT = 24
    LESS_THAN = 25
    GREATER_THAN = 26
    LESS_EQUAL = 27
    GREATER_EQUAL = 28
    TRUE = 29
    FALSE = 30
    IDENTIFIER = 31
    NUMBER = 32
    STRING = 33
    LPAREN = 34
    RPAREN = 35
    COLON = 36
    COMMA = 37
    LBRACK = 38
    RBRACK = 39
    NEWLINE = 40
    WS = 41
    COMMENT = 42
    MULTI_COMMENT = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'->'", "'K\\u00E1ajal'", "'Xuul'", "'Ts\\u2019\\u00E1aj'", 
            "'Ts'\\u00E1a_ti'_pantalla'", "'U_yokol'", "'Wa_jaaj_lela''", 
            "'Ba'ale''", "'Ts'o'oksik_le condici\\u00F3n'", "'Ka'alikil'", 
            "'Uti'al'", "'Amal'", "'Ts'o'oksik_le bucle'", "'F\\u00FAunsion'", 
            "'Ts'o'oksik_le funci\\u00F3n'", "'Y\\u00E9etel'", "'Wa'", "'+'", 
            "'-'", "'*'", "'/'", "'**'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'true'", "'false'", "'('", "')'", "':'", "','", "'['", 
            "']'" ]

    symbolicNames = [ "<INVALID>",
            "KAAJAL", "XUUL", "TSAAJ", "TSAATI", "UYOKOL", "WAJAAJ", "BAALE", 
            "KUCH_COND", "KAALIKIL", "UTIAL", "AMAL", "KUCH_BUCLE", "FUUNSION", 
            "KUCH_FUNC", "AND", "OR", "PLUS", "REST", "MULTIPLY", "DIVIDE", 
            "POWER", "EQUALS", "DIFFERENT", "LESS_THAN", "GREATER_THAN", 
            "LESS_EQUAL", "GREATER_EQUAL", "TRUE", "FALSE", "IDENTIFIER", 
            "NUMBER", "STRING", "LPAREN", "RPAREN", "COLON", "COMMA", "LBRACK", 
            "RBRACK", "NEWLINE", "WS", "COMMENT", "MULTI_COMMENT" ]

    ruleNames = [ "T__0", "KAAJAL", "XUUL", "TSAAJ", "TSAATI", "UYOKOL", 
                  "WAJAAJ", "BAALE", "KUCH_COND", "KAALIKIL", "UTIAL", "AMAL", 
                  "KUCH_BUCLE", "FUUNSION", "KUCH_FUNC", "AND", "OR", "PLUS", 
                  "REST", "MULTIPLY", "DIVIDE", "POWER", "EQUALS", "DIFFERENT", 
                  "LESS_THAN", "GREATER_THAN", "LESS_EQUAL", "GREATER_EQUAL", 
                  "TRUE", "FALSE", "IDENTIFIER", "NUMBER", "STRING", "LPAREN", 
                  "RPAREN", "COLON", "COMMA", "LBRACK", "RBRACK", "NEWLINE", 
                  "WS", "COMMENT", "MULTI_COMMENT" ]

    grammarFileName = "BaaxalXPython.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


